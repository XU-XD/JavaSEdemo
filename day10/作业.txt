1、多态中访问变量、方法的特点？
多态访问属性的特点
1、特点：
编译看左边，运行看左边
2、解释：
编译看左边：要访问某一个属性，编译时期：先看=左边的类型中有没有该变量的定义，	            如果左边的类型中有定义该变量，就能编译成功，否则编译失败。
运行看左边：再运行时期，看=左边的类型如何如何给该属性赋值，左边的类型中如何	            个属性赋值，访问结果就是哪一个值。

多态访问方法的特点
1、特点：
编译看左边，运行看右边
2、解释：
访问某个方法，编译时期看=左边的类型中有没有定义该方法，如果定义了就能使用，如果没有定义，就不能使用，编译失败；
再运行时期，看=右边的类型中对该方法是如何实现，右边的类型如何实现该方法，就如何执行。

多态访问静态方法的特点
1、特点：
编译看左边，运行看左边。
2、说明：
静态方法被哪一个类型的引用变量调用，就执行哪一个类中的实现内容
不会随着子类的不同而不同

2、什么是向下转型和向上转型？
1、向上转型：
使用父类的引用变量，接收子类的对象
转型之后，访问权限：
    一旦向上转型之后，该变量访问的权限变小，只能先看父类中有没有定义过，父类	    中定义过才能使用，父类中没有定义过，就不能使用。
2、向下转型：
将指向子类对象的父类引用，恢复为子类的引用
SuperMan sum = (SuperMan)man;
向下转型之后，转型后的变量访问权限：
     就恢复为和子类对象一样的访问访问：既可以访问父类的也可以访问本类的

3、抽象类的特点？
使用abstract关键字修饰的类型
4、接口的特点？
（1）定义接口的关键字：interface
（2）接口中只可以定义抽象方法，不可以定义非抽象方法
（3）类和接口之间的关系：
     不是继承关系，而是实现关系
     实现接口的关键字：implements
     类型实现一个接口之后，接口中的抽象方法，也能被该类所继承
（4）接口不能实例化（不能创建对象）
（5）接口和普通类以及抽象类一样，使用之前先编译

5、类和接口之间互相的关系？
类与接口(interface)：实现关系  implements
       可以单实现、可以多实现、不可以多层实现
       单实现：实现之后，该类型可以继承接口的每一个抽象方法
       多实现：实现多个接口之后，可以继承每一个接口的方法
       不能多层实现：因为一个类型实现一个接口之后，那么该类和其他类之间不能是实现关系，只能是继承关系。

6、instanceof关键字的作用?
当需要向下转型时，不确定该变量接收的对象属于哪一个类型，可以使用该关键字先判断，避免出现类型转换异常。
7、根据需求，设计代码，完成逻辑:
	（1）编写程序实现乐手弹奏乐器。乐手可以弹奏不同的乐器从而发出不同的声音。
	（2）可以弹奏的乐器包括二胡、钢琴和琵琶。
   	（3）实现思路及关键代码：
                1)定义乐器类：二胡Erhu、钢琴Piano和小提琴Violin
                  每个乐器都有一个makeSound()方法，但是不同乐器发出声音不一样
                2)定义乐手类Musician，乐手只会一个方法弹奏play，但是该方法可以弹奏不同的乐器
                3)定义测试类，给乐手不同的乐器，让乐手进行弹奏。
package com.xxd.demo04;
public class Demo01 {
    public static void main(String[] args) {
        Musician ren = new Musician();
        ren.play(new Erhu());
        ren.play(new Piano());
        ren.play(new Violin());
    }
}
class Musician{
    public void play(Music n){
        if(n instanceof Erhu) n.makeSound();
        if(n instanceof Piano) n.makeSound();
        if(n instanceof Violin) n.makeSound();
    }
}
abstract class Music{
    public abstract void makeSound();
}
class Erhu extends Music{
    @Override
    public void makeSound() {
        System.out.println("二胡声");
    }
}
class Piano extends Music {
    @Override
    public void makeSound() {
        System.out.println("钢琴声");
    }
}
class Violin extends Music{
    @Override
    public void makeSound() {
        System.out.println("小提琴声");
    }
}


